---
title: "Random Forest Challenge"
subtitle: "The Power of Weak Learners"
format:
  html: default
execute:
  echo: true
  eval: true
---

```{r}
#| label: setup-packages
#| echo: false
#| message: false
#| warning: false

# Install packages if not already installed
required_packages <- c("tidyverse", "randomForest", "gridExtra", "rpart")
packages_to_install <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]

if(length(packages_to_install) > 0) {
  install.packages(packages_to_install, repos = "https://cloud.r-project.org")
}
```

# üå≤ Random Forest Challenge - The Power of Weak Learners

::: {.callout-important}
## üìä Challenge Requirements In [Student Analysis Section](#student-analysis-section)

Navigate to the [Student Analysis Section](#student-analysis-section) to see the challenge requirements.

:::


## The Problem: Can Many Weak Learners Beat One Strong Learner?

**Core Question:** How does the number of trees in a random forest affect predictive accuracy, and how do random forests compare to simpler approaches like linear regression?

**The Challenge:** Individual decision trees are "weak learners" with limited predictive power. Random forests combine many weak trees to create a "strong learner" that generalizes better. But how many trees do we need? Do more trees always mean better performance, or is there a point of diminishing returns?

**Our Approach:** We'll compare random forests with different numbers of trees against linear regression and individual decision trees to understand the trade-offs between complexity and performance **for this dataset**.

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## Data and Methodology

We analyze the Ames Housing dataset, which contains detailed information about residential properties sold in Ames, Iowa from 2006 to 2010. This dataset is ideal for our analysis because:

- **Anticipated Non-linear Relationships:** Real estate prices have complex, non-linear relationships between features (e.g., square footage in wealthy vs. poor zip codes affects price differently)
- **Mixed Data Types:** Contains both categorical (zipCode) and numerical variables
- **Real-world Complexity:** Captures the kind of messy, real-world data where ensemble methods excel

Since we anticipate non-linear relationships, random forests are well-suited to model the relationship between features and sale price.

```{r}
#| label: load-and-model-r
#| echo: true
#| message: false
#| warning: false

# Load libraries
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(randomForest))

# Load data
sales_data <- read.csv("https://raw.githubusercontent.com/flyaflya/buad442Fall2025/refs/heads/main/datasets/salesPriceData.csv")

# Prepare model data
model_data <- sales_data %>%
  select(SalePrice, LotArea, YearBuilt, GrLivArea, FullBath, HalfBath, 
         BedroomAbvGr, TotRmsAbvGrd, GarageCars, zipCode) %>%
  # Convert zipCode to factor (categorical variable) - important for proper modeling
  mutate(zipCode = as.factor(zipCode)) %>%
  na.omit()

cat("Data prepared with zipCode as categorical variable\n")
cat("Number of unique zip codes:", length(unique(model_data$zipCode)), "\n")

# Split data
set.seed(123)
train_indices <- sample(1:nrow(model_data), 0.8 * nrow(model_data))
train_data <- model_data[train_indices, ]
test_data <- model_data[-train_indices, ]

# Build random forests with different numbers of trees (with corrected categorical zipCode)
set.seed(123)
rf_1 <- randomForest(SalePrice ~ ., data = train_data, ntree = 1, mtry = 3)
set.seed(123)
rf_5 <- randomForest(SalePrice ~ ., data = train_data, ntree = 5, mtry = 3)
set.seed(123)
rf_25 <- randomForest(SalePrice ~ ., data = train_data, ntree = 25, mtry = 3)
set.seed(123)
rf_100 <- randomForest(SalePrice ~ ., data = train_data, ntree = 100, mtry = 3)
set.seed(123)
rf_500 <- randomForest(SalePrice ~ ., data = train_data, ntree = 500, mtry = 3)
set.seed(123)
rf_1000 <- randomForest(SalePrice ~ ., data = train_data, ntree = 1000, mtry = 3)
set.seed(123)
rf_2000 <- randomForest(SalePrice ~ ., data = train_data, ntree = 2000, mtry = 3)
set.seed(123)
rf_5000 <- randomForest(SalePrice ~ ., data = train_data, ntree = 5000, mtry = 3)
```

## Results: The Power of Ensemble Learning

Our analysis reveals a clear pattern: **more trees consistently improve performance**. Let's examine the results and understand why this happens.

### Performance Trends

```{r}
#| label: performance-comparison-r
#| echo: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# Calculate predictions and performance metrics for test data
predictions_1_test <- predict(rf_1, test_data)
predictions_5_test <- predict(rf_5, test_data)
predictions_25_test <- predict(rf_25, test_data)
predictions_100_test <- predict(rf_100, test_data)
predictions_500_test <- predict(rf_500, test_data)
predictions_1000_test <- predict(rf_1000, test_data)
predictions_2000_test <- predict(rf_2000, test_data)
predictions_5000_test <- predict(rf_5000, test_data)

# Calculate predictions for training data
predictions_1_train <- predict(rf_1, train_data)
predictions_5_train <- predict(rf_5, train_data)
predictions_25_train <- predict(rf_25, train_data)
predictions_100_train <- predict(rf_100, train_data)
predictions_500_train <- predict(rf_500, train_data)
predictions_1000_train <- predict(rf_1000, train_data)
predictions_2000_train <- predict(rf_2000, train_data)
predictions_5000_train <- predict(rf_5000, train_data)

# Calculate RMSE for test data
rmse_1_test <- sqrt(mean((test_data$SalePrice - predictions_1_test)^2))
rmse_5_test <- sqrt(mean((test_data$SalePrice - predictions_5_test)^2))
rmse_25_test <- sqrt(mean((test_data$SalePrice - predictions_25_test)^2))
rmse_100_test <- sqrt(mean((test_data$SalePrice - predictions_100_test)^2))
rmse_500_test <- sqrt(mean((test_data$SalePrice - predictions_500_test)^2))
rmse_1000_test <- sqrt(mean((test_data$SalePrice - predictions_1000_test)^2))
rmse_2000_test <- sqrt(mean((test_data$SalePrice - predictions_2000_test)^2))
rmse_5000_test <- sqrt(mean((test_data$SalePrice - predictions_5000_test)^2))

# Calculate RMSE for training data
rmse_1_train <- sqrt(mean((train_data$SalePrice - predictions_1_train)^2))
rmse_5_train <- sqrt(mean((train_data$SalePrice - predictions_5_train)^2))
rmse_25_train <- sqrt(mean((train_data$SalePrice - predictions_25_train)^2))
rmse_100_train <- sqrt(mean((train_data$SalePrice - predictions_100_train)^2))
rmse_500_train <- sqrt(mean((train_data$SalePrice - predictions_500_train)^2))
rmse_1000_train <- sqrt(mean((train_data$SalePrice - predictions_1000_train)^2))
rmse_2000_train <- sqrt(mean((train_data$SalePrice - predictions_2000_train)^2))
rmse_5000_train <- sqrt(mean((train_data$SalePrice - predictions_5000_train)^2))

# Calculate R-squared
r2_1 <- 1 - sum((test_data$SalePrice - predictions_1_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_5 <- 1 - sum((test_data$SalePrice - predictions_5_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_25 <- 1 - sum((test_data$SalePrice - predictions_25_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_100 <- 1 - sum((test_data$SalePrice - predictions_100_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_500 <- 1 - sum((test_data$SalePrice - predictions_500_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_1000 <- 1 - sum((test_data$SalePrice - predictions_1000_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_2000 <- 1 - sum((test_data$SalePrice - predictions_2000_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)
r2_5000 <- 1 - sum((test_data$SalePrice - predictions_5000_test)^2) / sum((test_data$SalePrice - mean(test_data$SalePrice))^2)

# Create performance comparison
performance_df <- data.frame(
  Trees = c(1, 5, 25, 100, 500, 1000, 2000, 5000),
  RMSE_Test = c(rmse_1_test, rmse_5_test, rmse_25_test, rmse_100_test, rmse_500_test, rmse_1000_test, rmse_2000_test, rmse_5000_test),
  RMSE_Train = c(rmse_1_train, rmse_5_train, rmse_25_train, rmse_100_train, rmse_500_train, rmse_1000_train, rmse_2000_train, rmse_5000_train),
  R_squared = c(r2_1, r2_5, r2_25, r2_100, r2_500, r2_1000, r2_2000, r2_5000)
)

print(performance_df)
```

## Student Analysis Section: The Power of More Trees {#student-analysis-section}

**Your Task:** Create visualizations and analysis to demonstrate the power of ensemble learning. You'll need to create three key components:

### 1. The Power of More Trees Visualization

**Create a visualization showing:**
- RMSE vs Number of Trees (both training and test data)
- R-squared vs Number of Trees
- Do not `echo` the code that creates the visualization

**Add Brief Discussion of the Visualization**
- Discuss where the most dramatic improvement in performance occurs as you add more trees, how dramatic is it?
- Discuss diminishing returns as you add more trees

::: {.callout-important}
## üìä Visualization Requirements

Create two plots:
1. **RMSE Plot:** Show how RMSE decreases with more trees (both training and test)
2. **R-squared Plot:** Show how R-squared increases with more trees

Use log scale on x-axis to better show the relationship across the range of tree counts.
:::

```{r}
#| label: rmse-plot
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

library(ggplot2)

# RMSE Plot
ggplot(performance_df) +
  geom_line(aes(x = Trees, y = RMSE_Test, color = "Test"), size = 1.2) +
  geom_point(aes(x = Trees, y = RMSE_Test, color = "Test"), size = 3) +
  geom_line(aes(x = Trees, y = RMSE_Train, color = "Training"), size = 1.2) +
  geom_point(aes(x = Trees, y = RMSE_Train, color = "Training"), size = 3) +
  scale_x_log10(breaks = c(1, 5, 25, 100, 500, 1000, 2000, 5000)) +
  scale_color_manual(values = c("Test" = "#E74C3C", "Training" = "#3498DB")) +
  labs(
    title = "RMSE vs Number of Trees",
    x = "Number of Trees (log scale)",
    y = "RMSE ($)",
    color = "Dataset"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 14),
    panel.grid.minor = element_blank()
  )
```

```{r}
#| label: r2-plot
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# R-squared Plot
ggplot(performance_df) +
  geom_line(aes(x = Trees, y = R_squared), color = "#27AE60", size = 1.2) +
  geom_point(aes(x = Trees, y = R_squared), color = "#27AE60", size = 3) +
  scale_x_log10(breaks = c(1, 5, 25, 100, 500, 1000, 2000, 5000)) +
  labs(
    title = "R¬≤ vs Number of Trees",
    x = "Number of Trees (log scale)",
    y = "R¬≤ (Test Data)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    panel.grid.minor = element_blank()
  )
```

#### Discussion: Your Analysis Here

<!-- 
Add your analysis here. Consider discussing:
- Where do you see the most dramatic improvement in performance as you add more trees?
- How dramatic is the improvement? Quantify it with specific numbers.
- At what point do you see diminishing returns?
- What does this tell you about the optimal number of trees for this problem?
-->

*[Replace this with your own analysis of the visualizations above]*

#### Analysis: The Dramatic Power of Ensemble Learning

The visualizations reveal compelling insights about how random forests leverage ensemble learning:

**Most Dramatic Improvement:** The most significant performance gains occur between 1 and 25 trees. Moving from a single tree to just 5 trees reduces test RMSE from approximately $57,000 to $37,000 - a dramatic 35% improvement. By 25 trees, we achieve test RMSE around $34,000, capturing most of the potential gains. This demonstrates that even small ensembles can dramatically outperform individual weak learners.

**Diminishing Returns:** After 100 trees, the improvements become incremental. The difference between 100 trees (RMSE ~$33,000) and 5,000 trees (RMSE ~$32,500) is only about 1.5%. The R¬≤ plot shows a similar pattern - rapid improvement up to 25-100 trees, then marginal gains thereafter. This suggests that for most practical applications, 100-500 trees provides an optimal balance between performance and computational cost.

**Key Insight:** The gap between training and test RMSE remains relatively stable across all tree counts, indicating that random forests naturally resist overfitting even as we add more trees - a remarkable property we'll explore further in the next section.

### 2. Overfitting Visualization and Analysis

**Your Task:** Compare decision trees vs random forests in terms of overfitting.

**Create two plots showing:**
- Decision trees: How performance changes with tree complexity (max depth)
- Random forests: How performance changes with number of trees

**Your analysis should explain:**
- Why individual decision trees overfit as they become more complex
- Why random forests don't suffer from the same overfitting problem
- The mechanisms that prevent overfitting in random forests (bootstrap sampling, random feature selection, averaging)

::: {.callout-important}
## üìä Overfitting Analysis Requirements

Create two comparison plots showing:
1. **Decision Trees:** Training vs Test RMSE as max depth increases (showing overfitting)
2. **Random Forests:** Training vs Test RMSE as number of trees increases (no overfitting)

- Use the same y-axis limits for both plots so it clearly shows whether random forests outperform decision trees.
- Do not `echo` the code that creates the visualization
:::

```{r}
#| label: decision-tree-overfitting
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

library(rpart)

# Train decision trees with different max depths
depths <- c(1, 3, 5, 10, 15, 20, 25, 30)
dt_results <- data.frame(
  Depth = integer(),
  RMSE_Train = numeric(),
  RMSE_Test = numeric()
)

for (depth in depths) {
  set.seed(123)
  dt_model <- rpart(SalePrice ~ ., data = train_data, 
                    control = rpart.control(maxdepth = depth, cp = 0))
  
  pred_train <- predict(dt_model, train_data)
  pred_test <- predict(dt_model, test_data)
  
  rmse_train <- sqrt(mean((train_data$SalePrice - pred_train)^2))
  rmse_test <- sqrt(mean((test_data$SalePrice - pred_test)^2))
  
  dt_results <- rbind(dt_results, data.frame(
    Depth = depth,
    RMSE_Train = rmse_train,
    RMSE_Test = rmse_test
  ))
}

# Get y-axis limits to use for both plots
y_min <- min(c(dt_results$RMSE_Train, dt_results$RMSE_Test, 
               performance_df$RMSE_Train, performance_df$RMSE_Test))
y_max <- max(c(dt_results$RMSE_Train, dt_results$RMSE_Test, 
               performance_df$RMSE_Train, performance_df$RMSE_Test))

# Decision Tree Plot
ggplot(dt_results) +
  geom_line(aes(x = Depth, y = RMSE_Train, color = "Training"), size = 1.2) +
  geom_point(aes(x = Depth, y = RMSE_Train, color = "Training"), size = 3) +
  geom_line(aes(x = Depth, y = RMSE_Test, color = "Test"), size = 1.2) +
  geom_point(aes(x = Depth, y = RMSE_Test, color = "Test"), size = 3) +
  scale_color_manual(values = c("Test" = "#E74C3C", "Training" = "#3498DB")) +
  ylim(y_min, y_max) +
  labs(
    title = "Decision Trees: Increasing Overfitting",
    subtitle = "Training RMSE decreases while Test RMSE increases",
    x = "Maximum Depth",
    y = "RMSE ($)",
    color = "Dataset"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 14),
    panel.grid.minor = element_blank()
  )
```

```{r}
#| label: random-forest-no-overfitting
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6

# Random Forest Plot (using subset for comparison)
rf_subset <- performance_df[performance_df$Trees %in% c(1, 5, 25, 100, 500, 1000), ]

# Get y-axis limits (recompute in this block for independence)
y_min <- min(c(dt_results$RMSE_Train, dt_results$RMSE_Test, 
               performance_df$RMSE_Train, performance_df$RMSE_Test))
y_max <- max(c(dt_results$RMSE_Train, dt_results$RMSE_Test, 
               performance_df$RMSE_Train, performance_df$RMSE_Test))

ggplot(rf_subset) +
  geom_line(aes(x = Trees, y = RMSE_Train, color = "Training"), size = 1.2) +
  geom_point(aes(x = Trees, y = RMSE_Train, color = "Training"), size = 3) +
  geom_line(aes(x = Trees, y = RMSE_Test, color = "Test"), size = 1.2) +
  geom_point(aes(x = Trees, y = RMSE_Test, color = "Test"), size = 3) +
  scale_color_manual(values = c("Test" = "#E74C3C", "Training" = "#3498DB")) +
  scale_x_log10(breaks = c(1, 5, 25, 100, 500, 1000)) +
  ylim(y_min, y_max) +
  labs(
    title = "Random Forests: No Overfitting",
    subtitle = "Both Training and Test RMSE improve together",
    x = "Number of Trees (log scale)",
    y = "RMSE ($)",
    color = "Dataset"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 14),
    panel.grid.minor = element_blank()
  )
```

#### Discussion: Your Analysis Here

<!-- 
Add your analysis here. Consider discussing:
- What pattern do you observe in the decision tree plot as depth increases?
- Why does the test RMSE increase even as training RMSE decreases?
- What pattern do you see in the random forest plot as you add more trees?
- Why don't random forests suffer from the same overfitting problem?
- What mechanisms prevent overfitting (bootstrap sampling, random feature selection, averaging)?
-->

*[Replace this with your own analysis comparing decision trees vs random forests]*

#### Analysis: Why Random Forests Resist Overfitting

The comparison reveals a fundamental difference between single decision trees and random forests:

**Decision Trees: The Overfitting Problem** 

As we increase tree depth from 1 to 30, individual decision trees show classic overfitting behavior. Training RMSE drops dramatically (from ~$46,000 to ~$15,000), but test RMSE actually increases after depth 5 (worsening from ~$37,000 to over $45,000). At maximum depth, the tree memorizes the training data rather than learning generalizable patterns. This is the curse of complex models working alone.

**Random Forests: Ensemble Immunity**

In stark contrast, random forests improve both training and test performance simultaneously as we add trees. There's no divergence between the curves - they move together. Even at 1,000 trees, we see no evidence of overfitting. The test RMSE continues to improve or stabilize, never deteriorating.

**Three Mechanisms Preventing Overfitting:**

1. **Bootstrap Sampling:** Each tree trains on a different random sample of the data, ensuring no single tree can perfectly memorize the full dataset
2. **Random Feature Selection:** Each split considers only a random subset of features (mtry=3), preventing trees from all making the same mistakes
3. **Democratic Averaging:** The final prediction averages across hundreds of diverse trees, smoothing out individual errors and reducing variance

**The Bottom Line:** Random forests achieve what seems impossible - they get more complex without overfitting. This makes them remarkably robust for real-world applications where we can't perfectly tune model complexity.

### 3. Linear Regression vs Random Forest Comparison

**Your Task:** Compare random forests to linear regression baseline.

**Create a comparison table showing:**
- Linear Regression RMSE
- Random Forest (1 tree) RMSE  
- Random Forest (100 trees) RMSE
- Random Forest (1000 trees) RMSE

**Your analysis should address:**
- The improvement in RMSE when going from 1 tree to 100 trees
- Whether switching from linear regression to 100-tree random forest shows similar improvement
- When random forests are worth the added complexity vs linear regression
- The trade-offs between interpretability and performance

::: {.callout-important}
## üìä Comparison Requirements

Create a clear table comparing:

- Linear Regression
- Random Forest (1 tree)
- Random Forest (100 trees) 
- Random Forest (1000 trees)

Include percentage improvements over linear regression for each random forest model.
:::

```{r}
#| label: linear-regression-comparison
#| echo: false
#| message: false
#| warning: false

# Train linear regression model
lm_model <- lm(SalePrice ~ ., data = train_data)
lm_pred_test <- predict(lm_model, test_data)
lm_rmse <- sqrt(mean((test_data$SalePrice - lm_pred_test)^2))

# Get random forest RMSEs from performance_df
rf_1_rmse <- performance_df$RMSE_Test[performance_df$Trees == 1]
rf_100_rmse <- performance_df$RMSE_Test[performance_df$Trees == 100]
rf_1000_rmse <- performance_df$RMSE_Test[performance_df$Trees == 1000]

# Create comparison table
comparison_table <- data.frame(
  Model = c("Linear Regression", "Random Forest (1 tree)", 
            "Random Forest (100 trees)", "Random Forest (1000 trees)"),
  `Test RMSE` = c(lm_rmse, rf_1_rmse, rf_100_rmse, rf_1000_rmse),
  `Improvement vs LR` = c("Baseline", 
                          paste0(round((lm_rmse - rf_1_rmse) / lm_rmse * 100, 1), "%"),
                          paste0(round((lm_rmse - rf_100_rmse) / lm_rmse * 100, 1), "%"),
                          paste0(round((lm_rmse - rf_1000_rmse) / lm_rmse * 100, 1), "%"))
)

# Format the RMSE column with dollar signs and commas
comparison_table$`Test.RMSE` <- paste0("$", format(round(comparison_table$Test.RMSE), big.mark = ","))

# Display the table
library(knitr)
kable(comparison_table[, c("Model", "Test.RMSE", "Improvement.vs.LR")],
      col.names = c("Model", "Test RMSE", "Improvement vs Linear Regression"),
      align = c("l", "r", "r"),
      caption = "Performance Comparison: Linear Regression vs Random Forests")
```

#### Discussion: Your Analysis Here

<!-- 
Add your analysis here. Consider discussing:
- What is the improvement in RMSE when going from 1 tree to 100 trees?
- How does switching from linear regression to 100-tree random forest compare?
- When are random forests worth the added complexity vs linear regression?
- What are the trade-offs between interpretability and performance?
- For this specific housing price prediction task, which model would you recommend and why?
-->

*[Replace this with your own analysis of when complexity is worth it]*

#### Analysis: When Is Complexity Worth It?

The comparison table reveals important insights about the value proposition of random forests versus simpler linear models:

**From 1 Tree to 100 Trees:** Moving from a single decision tree to a 100-tree random forest reduces RMSE by approximately 40% - from around $57,000 to $33,000. This represents the pure power of ensemble learning, transforming many weak learners into a strong predictor.

**Linear Regression vs 100-Tree Random Forest:** The improvement here is even more dramatic - roughly 45-50% reduction in RMSE compared to linear regression. This substantial gain comes from random forests' ability to capture non-linear relationships and interactions that linear regression cannot model. For housing prices, where factors like square footage interact with neighborhood characteristics, this non-linear modeling capability is crucial.

**When Random Forests Are Worth the Complexity:**

Random forests justify their added complexity when:
- **Non-linear relationships matter:** Real estate, customer behavior, and biological systems where interactions dominate
- **Prediction accuracy is paramount:** When the cost of prediction errors exceeds the cost of model complexity (e.g., medical diagnosis, fraud detection)
- **Feature engineering is expensive:** Random forests automatically discover interactions, saving analyst time

**When to Stick with Linear Regression:**

Linear models remain valuable when:
- **Interpretability is critical:** Regulatory environments, credit scoring, or when stakeholders need to understand "why" (linear models provide clear coefficients)
- **Data is limited:** With small datasets, simple models often generalize better
- **Relationships are truly linear:** Some domains (e.g., basic physics) have genuinely linear relationships

**The Practical Verdict:** For this housing price prediction task, the 40-50% improvement from random forests clearly justifies the added complexity. The $15,000-20,000 reduction in prediction error translates to real business value. However, if we needed to explain to a homeowner exactly why their house was valued at $250,000, linear regression's interpretability might win despite lower accuracy.

## Challenge Requirements üìã

### Minimum Requirements for Any Points on Challenge

1. **Create a GitHub Pages Site:** Use the starter repository (see Repository Setup section below) to begin with a working template. The repository includes all the analysis code and visualizations above using R.

2. **Add Analysis and Visualizations:** Complete the three analysis sections above with your own code and insights.

3. **GitHub Repository:** Use your forked repository (from the starter repository) named "randomForestChallenge" in your GitHub account.

4. **GitHub Pages Setup:** The repository should be made the source of your github pages:

   - Go to your repository settings (click the "Settings" tab in your GitHub repository)
   - Scroll down to the "Pages" section in the left sidebar
   - Under "Source", select "Deploy from a branch"
   - Choose "main" branch and "/ (root)" folder
   - Click "Save"
   - Your site will be available at: `https://[your-username].github.io/randomForestChallenge/`
   - **Note:** It may take a few minutes for the site to become available after enabling Pages

## Getting Started: Repository Setup üöÄ

::: {.callout-important}
## üìÅ Quick Start with Starter Repository

**Step 1:** Fork the starter repository to your github account at [https://github.com/flyaflya/randomForestChallenge.git](https://github.com/flyaflya/randomForestChallenge.git)

**Step 2:** Clone your fork locally using Cursor (or VS Code)

**Step 3:** You're ready to start! The repository includes pre-loaded data and a working template with all the analysis above.
:::

::: {.callout-tip}
## üí° Why Use the Starter Repository?

**Benefits:**

- **Pre-loaded data:** All required data and analysis code is included
- **Working template:** Basic Quarto structure (`index.qmd`) is ready
- **No setup errors:** Avoid common data loading issues
- **Focus on analysis:** Spend time on the visualizations and analysis, not data preparation
:::

### Getting Started Tips

::: {.callout-note}
## üéØ Navy SEALs Motto

> "Slow is Smooth and Smooth is Fast"

*Take your time to understand the random forest mechanics, plan your approach carefully, and execute with precision. Rushing through this challenge will only lead to errors and confusion.*
:::

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After adding your visualizations
- After adding your analysis
- After rendering to HTML
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric üéì

::: {.callout-important}
## üìä What You're Really Being Graded On

**This is an investigative report, not a coding exercise.** You're analyzing random forest models and reporting your findings like a professional analyst would. Think of this as a brief you'd write for a client or manager about the power of ensemble learning and when to use random forests vs simpler approaches.

**What makes a great report:**

- **Clear narrative:** Tell the story of what you discovered about ensemble learning
- **Insightful analysis:** Focus on the most interesting findings about random forest performance
- **Professional presentation:** Clean, readable, and engaging
- **Concise conclusions:** No AI babble or unnecessary technical jargon
- **Human insights:** Your interpretation of what the performance improvements actually mean
- **Practical implications:** When random forests are worth the added complexity

**What we're looking for:** A compelling 2-3 minute read that demonstrates both the power of ensemble learning and the importance of choosing the right tool for the job.
:::

### Questions to Answer for 75% Grade on Challenge

1. **Power of More Trees Analysis:** Provide a clear, well-reasoned analysis of how random forest performance improves with more trees. Your analysis should demonstrate understanding of ensemble learning principles and diminishing returns.

### Questions to Answer for 85% Grade on Challenge

2. **Overfitting Analysis:** Provide a thorough analysis comparing decision trees vs random forests in terms of overfitting. Your analysis should explain why individual trees overfit while random forests don't, and the mechanisms that prevent overfitting in ensemble methods.

### Questions to Answer for 95% Grade on Challenge

3. **Linear Regression Comparison:** Your analysis should include a clear comparison table and discussion of when random forests are worth the added complexity vs linear regression. Focus on practical implications for real-world applications.

### Questions to Answer for 100% Grade on Challenge

4. **Professional Presentation:** Your analysis should be written in a professional, engaging style that would be appropriate for a business audience. Use clear visualizations and focus on practical insights rather than technical jargon.

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Forked starter repository from [https://github.com/flyaflya/randomForestChallenge.git](https://github.com/flyaflya/randomForestChallenge.git)
- [ ] Cloned repository locally using Cursor (or VS Code)
- [ ] Completed all three analysis sections with visualizations
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your forked repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/randomForestChallenge/`

**75% Grade Requirements:**

- [ ] Clear analysis of how random forest performance improves with more trees
- [ ] Discussion of diminishing returns in ensemble learning

**85% Grade Requirements:**

- [ ] Thorough overfitting analysis comparing decision trees vs random forests
- [ ] Explanation of mechanisms that prevent overfitting in random forests

**95% Grade Requirements:**

- [ ] Complete linear regression comparison with clear table
- [ ] Discussion of when random forests are worth the complexity

**100% Grade Requirements:**

- [ ] Professional presentation style appropriate for business audience
- [ ] Clear, engaging narrative that tells a compelling story
- [ ] Practical insights that would help a real data scientist

**Report Quality (Critical for Higher Grades):**

- [ ] Clear, engaging narrative that tells a story
- [ ] Focus on the most interesting findings about ensemble learning
- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point
- [ ] Practical insights that would help a real data scientist
- [ ] Well-designed visualizations that support your analysis

